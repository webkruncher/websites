

<Page name="KrunchServer.Details">
	<t>InfoKruncher Details</t>
	<Content>
		<p>	
			The InformationKruncher is a work in progress.   The server has a 
			tiny footprint, and can be configured to spawn any number of 
			processes and any number of threads per process.  The 
			source code is designed to be completely minimalistic, and
			fully exstensible.
		</p>
		<p>	
			<div style="display:inline">
				The basic service is designed to extend forever, but it starts out simple; 
				take request, send response.  Complex, custom business-ware can be built on
				the basic request / response methods of the basic hypertext protocol.
			</div>
			<div style="display:inline">
				For this service to be useful in the real world, it must be secured.  
				and while it is completely necessary for any digital service to be 
				secure, the next goal for this project is desiging the business-ware patterns.   
				The logic that provides the actual service must remain completely independent, 
				and agnostic of the security features, and the security components should be 
				independent, and isolated from the business-ware.  Keeping features
				isolated from each other paves the way for extensible designs.
			</div>
		</p>
		<p>
			<div style="display:inline">
				To demonstrate the concept, 
			</div>  
			<div 
				style="margin:0px;cursor:pointer;display:inline; color:teal;"
				onmouseover="this.style.color='blue'"
				onmouseout="this.style.color='black'"
				onclick="Navigate('KrunchServer.Example')" >
				this example
			</div>
			<div style="margin:0px;display:inline">
				loads a specific xml file off of the server disk,
				then uses my own 
			</div>  
			<div 
				style="margin:0px;cursor:pointer;display:inline; color:teal;"
				onmouseover="this.style.color='blue'"
				onmouseout="this.style.color='black'"
				onclick="Navigate('Leave','http://github.com/webkruncher/exexml')" >ExeXml Project
			</div>
			<div style="margin:0px;display:inline"> 
				to apply custom rules to the payload, and
				sends it back to the user agent.
				This pattern can do a lot.  Since this is running in a compiled binary
				on the server, the code has access to the entire system.  This is good, and
				bad.  The bad news is that you'll need to be very careful.  The good news
				is that you can do just about anything you want to do with the system.
			</div>  
		</p>
		<p>	
			<div style="display:inline">
				The future of this project will involve support for standard security
				features, and database connection integrations.
			</div>
		</p>
	</Content>
</Page>

